import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'package:tabakroom_staff/models/api_response.dart';
import 'package:tabakroom_staff/services/app_preferences.dart';

class ApiService {
  static final String? _baseUrl = dotenv.env['MODE'] == 'TEST'
      ? Platform.isAndroid
          ? dotenv.env['TEST_BASE_URL_ANDROID']
          : dotenv.env['TEST_BASE_URL']
      : dotenv.env['PROD_BASE_URL'];
  // üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∫–æ–ª–ª–±—ç–∫–∞ –≤—ã—Ö–æ–¥–∞
  static VoidCallback? onLogoutCallback;

  /// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
  static Future<String?> _getToken() async =>
      AppPreferences.getValue('access_token');

  /// –ü–æ–ª—É—á–∞–µ–º refresh-—Ç–æ–∫–µ–Ω
  static Future<String?> _getRefreshToken() async =>
      AppPreferences.getValue('refresh_token');

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫
  static Future<bool> _refreshToken({int retryCount = 1}) async {
    if (retryCount > 1) return false; // üî• –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏

    final refreshToken = await _getRefreshToken();
    if (refreshToken == null) {
      onLogoutCallback?.call();
      return false;
    }

    final response = await http.post(
      Uri.parse('$_baseUrl/token/refresh/'),
      headers: _getHeaders(),
      body: jsonEncode({'refresh': refreshToken}),
    );

    if (response.statusCode == 200) {
      final data = _safeJsonDecode(response.body);
      if (data != null && data.containsKey('access')) {
        await AppPreferences.setValue('access_token', data['access']);
        return true;
      }
    }
    return false;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–∫–ª—é—á–∞–µ–º –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ)
  static Future<bool> _checkUserStatus() async {
    final response = await _sendHttpRequest<Map<String, dynamic>>(
      method: 'GET',
      endpoint: '/users/user-is-active/',
      checkToken: false, // ‚ùó –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
    );

    return response.isSuccess && response.data?['is_active'] == true;
  }

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
  static Future<ApiResponse<T>> _sendHttpRequest<T>({
    required String method,
    required String endpoint,
    Map<String, dynamic>? body,
    bool checkToken = false,
  }) async {
    try {
      if (checkToken) {
        bool isActive = await _checkUserStatus();
        if (!isActive) {
          onLogoutCallback?.call();
          return ApiResponse.error("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω");
        }
      }

      String? token = await _getToken();
      Uri url = Uri.parse('$_baseUrl$endpoint');
      http.Response response;
      if (method == 'POST') {
        response = await http.post(url,
            headers: _getHeaders(token), body: jsonEncode(body));
      } else {
        response = await http.get(url, headers: _getHeaders(token));
      }

      if (response.statusCode == 401) {
        final refreshToken = await _getRefreshToken();

        if (refreshToken == null) {
          return ApiResponse.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
        } else {
          final refreshed = await _refreshToken();
          if (refreshed) {
            token = await _getToken();
            response = method == 'POST'
                ? await http.post(url,
                    headers: _getHeaders(token), body: jsonEncode(body))
                : await http.get(url, headers: _getHeaders(token));
          } else {
            return ApiResponse.error(
                "–û—à–∏–±–∫–∞ 401: –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å");
          }
        }
      }

      return _handleResponse<T>(response);
    } on SocketException {
      return ApiResponse.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É");
    } on TimeoutException {
      return ApiResponse.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞");
    } catch (e) {
      return ApiResponse.error(e.toString());
    }
  }

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å
  static Future<ApiResponse<T>> get<T>(String endpoint,
          {bool checkToken = true}) async =>
      _sendHttpRequest<T>(
          method: 'GET', endpoint: endpoint, checkToken: checkToken);

  /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π POST-–∑–∞–ø—Ä–æ—Å
  static Future<ApiResponse<T>> post<T>(
          String endpoint, Map<String, dynamic> body,
          {bool checkToken = true}) async =>
      _sendHttpRequest<T>(
          method: 'POST',
          endpoint: endpoint,
          body: body,
          checkToken: checkToken);

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º
  static Map<String, String> _getHeaders([String? token]) => {
        'Content-Type': 'application/json',
        if (token != null) 'Authorization': 'Bearer $token',
      };

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  static ApiResponse<T> _handleResponse<T>(http.Response response) {
    if (response.statusCode >= 200 && response.statusCode < 300) {
      final decodedData = _safeJsonDecode(response.body);
      if (decodedData != null) {
        return ApiResponse.success(decodedData as T);
      }
    }
    return ApiResponse.error("–û—à–∏–±–∫–∞ ${response.statusCode}: ${response.body}");
  }

  /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON
  static dynamic _safeJsonDecode(String source) {
    try {
      return jsonDecode(utf8.decode(source.runes.toList()));
    } catch (e) {
      return {'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö'};
    }
  }
}
