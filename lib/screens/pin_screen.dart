import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:local_auth/local_auth.dart';
import 'package:tabakroom_staff/main.dart';
import 'package:tabakroom_staff/services/app_preferences.dart';
import 'package:tabakroom_staff/services/auth_service.dart';
import 'package:tabakroom_staff/themes/theme_data.dart';
import 'package:tabakroom_staff/widgets/custom_snakbar.dart';
import 'package:flutter_app_lock/flutter_app_lock.dart';

class PinScreen extends StatefulWidget {
  const PinScreen({Key? key}) : super(key: key);

  @override
  _PinScreenState createState() => _PinScreenState();
}

class _PinScreenState extends State<PinScreen>
    with SingleTickerProviderStateMixin {
  final LocalAuthentication _auth = LocalAuthentication();
  List<String> _pin = [];
  String? _savedPin;
  bool _isConfirmingPin = false;
  List<String>? _firstEnteredPin;
  late AnimationController _animationController;
  late Animation<double> _blurAnimation;
  bool blurScreen = false;
  bool _isPinLoaded = false; // üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è PIN

  bool get _isDarkMode => Theme.of(context).brightness == Brightness.dark;

  @override
  void initState() {
    super.initState();
    // üîπ –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞–∑–º—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Ä–∞–Ω–∞
    _animationController = AnimationController(
      vsync: this,
      duration:
          const Duration(milliseconds: 700), // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
    );

    _blurAnimation = Tween<double>(begin: 10.0, end: 0.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeOut),
    );

    // üîπ –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –±–∏–æ–º–µ—Ç—Ä–∏–∏, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞–ª—Å—è `PinScreen`
    Future.delayed(const Duration(milliseconds: 500), () {
      if (mounted) {
        _loadSavedPin();
      }
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  /// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π PIN-–∫–æ–¥
  Future<void> _loadSavedPin() async {
    final pin = await AppPreferences.getValue<String>('user_pin');
    setState(() {
      _savedPin = pin;
      _isPinLoaded = true; // üîπ –¢–µ–ø–µ—Ä—å PIN –∑–∞–≥—Ä—É–∂–µ–Ω, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å UI
    });

    if (pin?.isNotEmpty == true) {
      bool authenticate =
          await _authenticateBiometric(); // üîπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Face ID, –µ—Å–ª–∏ PIN –µ—Å—Ç—å
      if (authenticate) {
        _unlockApp();
      }
    } else {
      _removeBlur(); // üîπ –ï—Å–ª–∏ PIN –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ
    }
  }

  void _removeBlur() {
    if (mounted) {
      _animationController.forward().then((_) {});
    }
    setState(() {
      blurScreen = false;
    });
  }

  void _startBlur() {
    setState(() {
      blurScreen = true;
    });
    _animationController.reset(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞
  }

  /// üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–æ–º–µ—Ç—Ä–∏—é (–µ—Å—Ç—å –ª–∏ –¥–∞—Ç—á–∏–∫–∏ + —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
  Future<bool> _canUseBiometric() async {
    bool canCheck = await _auth.canCheckBiometrics;
    List<BiometricType> availableBiometrics =
        await _auth.getAvailableBiometrics();

    bool isBiometricEnabled = canCheck && availableBiometrics.isNotEmpty;

    return isBiometricEnabled;
  }

  /// üîπ –ó–∞–ø—É—Å–∫–∞–µ–º Face ID / Touch ID, –µ—Å–ª–∏ –±–∏–æ–º–µ—Ç—Ä–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
  Future<bool> _authenticateBiometric() async {
    if (!await _canUseBiometric()) {
      _removeBlur();
      return false;
    }

    try {
      _startBlur();
      bool authenticated = await _auth.authenticate(
        localizedReason: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Face ID –¥–ª—è –≤—Ö–æ–¥–∞',
        options: const AuthenticationOptions(biometricOnly: true),
      );
      _removeBlur();

      return authenticated;
    } catch (e) {
      _removeBlur();

      return false;
    }
  }

  /// üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –≤ PIN-–∫–æ–¥
  void _addDigit(String digit) {
    if (_pin.length < 6) {
      setState(() {
        _pin.add(digit);
      });

      if (_pin.length == 6) {
        _verifyPin();
      }
    }
  }

  /// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã
  void _deleteDigit() {
    if (_pin.isNotEmpty) {
      setState(() {
        _pin.removeLast();
      });
    }
  }

  /// üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º PIN-–∫–æ–¥
  Future<void> _verifyPin() async {
    final enteredPin = _pin.join();

    if (_savedPin == null) {
      if (!_isConfirmingPin) {
        // üîπ –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ PIN-–∫–æ–¥–∞
        setState(() {
          _firstEnteredPin = List.from(_pin);
          _pin.clear();
          _isConfirmingPin = true;
        });
      } else {
        // üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ PIN-–∫–æ–¥–∞
        if (_firstEnteredPin!.join() == enteredPin) {
          await AppPreferences.setValue<String>('user_pin', enteredPin);
          setState(() {
            _savedPin = enteredPin;
          });
          bool authenticated =
              await _authenticateBiometric(); // üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Face ID
          _unlockApp();
        } else {
          // üîπ –û—à–∏–±–∫–∞: PIN-–∫–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
          setState(() {
            _pin.clear();
            _isConfirmingPin = false;
          });
          CustomSnackbar.show(context,
              message: 'PIN-–∫–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
              type: WidgetType.warning,
              position: SnackbarPosition.top,
              duration: const Duration(seconds: 3));
        }
      }
    } else if (_savedPin == enteredPin) {
      _unlockApp();
    } else {
      // üîπ –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥
      setState(() {
        _pin.clear();
      });

      CustomSnackbar.show(context,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥',
          type: WidgetType.danger,
          position: SnackbarPosition.top,
          duration: const Duration(seconds: 3));
    }
  }

  /// üîπ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  void _unlockApp() {
    AppLock.of(context)?.didUnlock(); // üîπ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: Stack(
      children: [
        Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              !_isPinLoaded
                  ? "" // üîπ –ü–æ–∫–∞ PIN –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                  : _isConfirmingPin
                      ? "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–¥"
                      : _savedPin == null
                          ? "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ–¥"
                          : "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥",
              style: Theme.of(context).textTheme.headlineLarge,
            ),
            const SizedBox(height: 20),

            // üîπ PIN-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (6 —Ç–æ—á–µ–∫)
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: List.generate(
                6,
                (index) => Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 5),
                  child: Container(
                    width: 18,
                    height: 18,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: index < _pin.length
                          ? AppColors.primary
                          : _isDarkMode
                              ? AppColors.backgroundDark2
                              : AppColors.defaultElement,
                    ),
                  ),
                ),
              ),
            ),

            const SizedBox(height: 70),

            _buildTextButton(
              '–í—ã–π—Ç–∏',
              () async {
                AuthService.logout();
                navigatorKey.currentState?.pushReplacementNamed('/login');
                _unlockApp();
              },
            ),

            // üîπ –¶–∏—Ñ—Ä–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            for (var row in [
              ['1', '2', '3'],
              ['4', '5', '6'],
              ['7', '8', '9'],
              ['face', '0', 'delete']
            ])
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: row.map((key) {
                  if (key == 'delete') {
                    return _buildIconButton('delete');
                  } else if (key == 'face') {
                    return _buildIconButton('face');
                  } else {
                    return _buildNumberButton(key, _isDarkMode);
                  }
                }).toList(),
              ),
          ],
        ),
        blurScreen
            ? AnimatedBuilder(
                animation: _blurAnimation,
                builder: (context, child) {
                  return BackdropFilter(
                    filter: ImageFilter.blur(
                        sigmaX: _blurAnimation.value,
                        sigmaY: _blurAnimation.value),
                    child: Opacity(
                      opacity:
                          _blurAnimation.value / 10, // üîπ –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
                      child: Container(
                        color: Colors.black
                            .withOpacity(0.2), // üîπ –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º—ã—Ç–∏–∏
                      ),
                    ),
                  );
                },
              )
            : SizedBox(),
      ],
    ));
  }

  /// üîπ –ö–Ω–æ–ø–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏ (1-9, 0)
  Widget _buildNumberButton(String number, bool isDarkMode) {
    return Container(
      margin: const EdgeInsets.all(10),
      width: 85,
      height: 85,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color:
            isDarkMode ? AppColors.backgroundDark2 : AppColors.defaultElement,
      ),
      child: Material(
        color: Colors.transparent,
        shape: const CircleBorder(),
        child: InkWell(
          onTap: () => _addDigit(number),
          borderRadius: BorderRadius.circular(50),
          child: Center(
            child: Text(
              number,
              style: Theme.of(context).textTheme.headlineLarge,
            ),
          ),
        ),
      ),
    );
  }

  /// üîπ –ö–Ω–æ–ø–∫–∞ Face ID
  Widget _buildIconButton(String typeIcon) {
    bool isPinEmpty = _pin.isEmpty;

    switch (typeIcon) {
      case 'face':
        return InkWell(
          onTap: () async {
            bool authenticated = await _authenticateBiometric();
            if (authenticated) _unlockApp();
          },
          borderRadius: BorderRadius.circular(50),
          child: Container(
            margin: const EdgeInsets.all(10),
            width: 70,
            height: 70,
            decoration: const BoxDecoration(
              shape: BoxShape.circle,
              color: Colors.transparent,
            ),
            child: Center(
                child: SvgPicture.asset(
              'assets/icons/${_isDarkMode ? 'custom_face_id_white.svg' : 'custom_face_id_black.svg'}',
              width: 55,
              height: 55,
            )),
          ),
        );
      case 'delete':
        return InkWell(
          onTap: () => isPinEmpty ? null : _deleteDigit(),
          borderRadius: BorderRadius.circular(50),
          child: Container(
            margin: const EdgeInsets.all(10),
            width: 70,
            height: 70,
            decoration: const BoxDecoration(
              shape: BoxShape.circle,
              color: Colors.transparent,
            ),
            child: Center(
              child: Icon(
                Icons.backspace,
                size: 28,
                color: Theme.of(context).iconTheme.color,
              ),
            ),
          ),
        );
      default:
        return SizedBox();
    }
  }

  /// üîπ –ö–Ω–æ–ø–∫–∞ "–ó–∞–±—ã–ª–∏ –∫–æ–¥?"
  Widget _buildTextButton(String text, VoidCallback onPressed) {
    return GestureDetector(
      onTap: onPressed,
      child: Container(
        margin: const EdgeInsets.all(10),
        width: 70,
        height: 20,
        child: Center(
          child: Text(
            text,
            style: TextStyle(
                color: AppColors.primary,
                fontWeight: FontWeight.bold,
                fontSize: 18),
            textAlign: TextAlign.center,
          ),
        ),
      ),
    );
  }
}
